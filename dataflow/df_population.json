{
	"name": "df_population",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_population_raw",
						"type": "DatasetReference"
					},
					"name": "populationRaw"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "countryMapping"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_population_transformed",
						"type": "DatasetReference"
					},
					"name": "sinkPopulationTransformed"
				}
			],
			"transformations": [
				{
					"name": "selectNeededColumns"
				},
				{
					"name": "splitIndicGeo"
				},
				{
					"name": "pivotIndic"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "selectColumnsToSave"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {indic_de,geo\\time} as string,",
				"          {2008 } as string,",
				"          {2009 } as string,",
				"          {2010 } as string,",
				"          {2011 } as string,",
				"          {2012 } as string,",
				"          {2013 } as string,",
				"          {2014 } as string,",
				"          {2015 } as string,",
				"          {2016 } as string,",
				"          {2017 } as string,",
				"          {2018 } as string,",
				"          {2019 } as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> populationRaw",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countryMapping",
				"populationRaw select(mapColumn(",
				"          indic_de_geo = {indic_de,geo\\time},",
				"          value = {2019 }",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectNeededColumns",
				"selectNeededColumns derive(indic_de = split(indic_de_geo,',')[1],",
				"          country_code = split(indic_de_geo,',')[2]) ~> splitIndicGeo",
				"splitIndicGeo pivot(groupBy(country_code),",
				"     pivotBy(indic_de, ['PC_Y0_14', 'PC_Y15_24', 'PC_Y25_49', 'PC_Y50_64', 'PC_Y65_79', 'PC_Y80_MAX']),",
				"     sum = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> pivotIndic",
				"pivotIndic, countryMapping lookup(country_code == country_code_2_digit,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          age_group_0_14 = sum_PC_Y0_14,",
				"          age_group_15_24 = sum_PC_Y15_24,",
				"          age_group_25_49 = sum_PC_Y25_49,",
				"          age_group_50_64 = sum_PC_Y50_64,",
				"          age_group_65_79 = sum_PC_Y65_79,",
				"          age_group_80_max = sum_PC_Y80_MAX,",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnsToSave",
				"selectColumnsToSave sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkPopulationTransformed"
			]
		}
	}
}