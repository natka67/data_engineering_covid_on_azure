{
	"name": "df_testing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_testing_raw",
						"type": "DatasetReference"
					},
					"name": "testingRaw"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "countryMapping"
				},
				{
					"dataset": {
						"referenceName": "ds_date_mapping",
						"type": "DatasetReference"
					},
					"name": "dateMapping"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_testing_transformed",
						"type": "DatasetReference"
					},
					"name": "sinkTestingTransformed"
				}
			],
			"transformations": [
				{
					"name": "lookupCountry"
				},
				{
					"name": "aggWeekDates"
				},
				{
					"name": "joinDateMapping"
				},
				{
					"name": "selectColumnsToSave"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as string,",
				"          level as string,",
				"          region as string,",
				"          region_name as string,",
				"          new_cases as string,",
				"          tests_done as string,",
				"          population as string,",
				"          testing_rate as double,",
				"          positivity_rate as double,",
				"          testing_data_source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> testingRaw",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countryMapping",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dateMapping",
				"testingRaw, countryMapping lookup(testingRaw@country == countryMapping@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"dateMapping aggregate(groupBy(year_week = year+'-W'+lpad(week_of_year,2,'0')),",
				"     start_of_the_week = min(date),",
				"          end_of_the_week = max(date)) ~> aggWeekDates",
				"lookupCountry, aggWeekDates join(testingRaw@year_week == aggWeekDates@year_week,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDateMapping",
				"joinDateMapping select(mapColumn(",
				"          country = testingRaw@country,",
				"          year_week = testingRaw@year_week,",
				"          level,",
				"          region,",
				"          region_name,",
				"          new_cases,",
				"          tests_done,",
				"          population = testingRaw@population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          start_of_the_week,",
				"          end_of_the_week",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnsToSave",
				"selectColumnsToSave sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkTestingTransformed"
			]
		}
	}
}